
import('fun_utils')
-- class panel begin
class('panel')

panel._obj = object.dummy()

function panel._init(self, res)
	self._visible = true

	self:_load_res(res)
end

function panel.show(self)
	if self._visible then
		return
	end
	self._visible = true
end

function panel.hide(self)
	if not self._visible then
		return
	end

	self._visible = false
end

function panel._load_res(self, res)
	if res == nil then
		return
	end
	-- unsafe code, 小心内存泄漏
--	local parent = _engine._game_instance
--	local parent = _engine.root
	local object = object.create_object(res)
--	object:add_to_root()
--	object:AddToViewport()
	self._obj = object
end

function panel.ensure(self, attr_name, fun, ...)
--	print(_text('panel ensure!!!!'), _text(attr_name))
	if self[attr_name] ~= nil then
		return fun(...)
	end

	local fun_wrapper = fun_utils.wrape_fun(fun, ...)
	local function _callback()
		if self[attr_name] == nil then
			_world:callback(0, _callback)
		else
			fun_wrapper()
		end
	end
	_world:callback(0, _callback)
end

function panel.release(self)
	self._obj:remove_from_parent()
end

function panel.add_to_viewport(self)
	return self._obj:AddToViewport()
end

function panel.__index(self, name)
	local attr = getmetatable(self)[name]
	if attr ~= nil then
		return attr
	end

	return self._obj[name]
end
-- class panel end