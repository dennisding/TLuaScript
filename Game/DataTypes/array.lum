
class('array', data_types.data_type)

function array._init(self, item_desc)
	self._item_desc = item_desc
	self._items = {}
end

function array._from_value(self, value)
	for index, item in ipairs(value) do
		self._items[index] = self._item_desc:from_value(self, item)
	end
end

function array.size(self)
	return #self._items
end

function array.get(self, index)
	return self._items[index]
end

function array.iter(self)
	local items = self._items
	local index = 0
	function _iter()
		index = index + 1
		local value = items[index]
		if value ~= nil then
			return index, value
		end
		return nil
	end

	return _iter
end

function array.insert(self, item, pos)
	local items = self._items
	pos = pos or (#items + 1)

	assert(pos > 0 and pos <= #items + 1)
	-- move the item
	table.insert(items, pos, item)

	self._item_desc:set_value_owner(item, self)
	self:notify_owner('insert', item, pos)
end

function array.find(self, item)
	for index, iter_item in self:iter() do
		if iter_item == item then
			return index
		end
	end

	return nil
end

function array.remove(self, item)
	local pos = self:find(item)
	assert(pos ~= nil)

	self:remove_at(pos)
end

function array.remove_at(self, pos)
	local items = self._items
	
	assert(pos > 0 and pos <= #items)

	table.remove(items, pos)
	self:notify_owner('remove', pos)
end

