
import('ui_panel')
-- gui_mgr begin

class('gui_mgr')

function gui_mgr._init(self)
	-- basic class type
	self.panel = ui_panel.panel
	self._guis = {}  -- {name:gui}
end

function gui_mgr.__index(self, name)
	local attr = getmetatable(self)[name]
	if attr ~= nil then
		return attr
	end

	assert(self._guis[name] == nil)

	local module_name = 'Guis.' .. name
	local module = clean_import(module_name)

	local gui_type = module[name]
	local gui = gui_type()

	self._guis[name] = gui
	rawset(self, name, gui)
	return gui
end

function gui_mgr.on_game_exit(self)
	for name, gui in pairs(self._guis) do
		gui:release()
		rawset(self, name, nil)
	end
	self._guis = {}
end

function gui_mgr.on_change_world(self)
	-- 这里需要对长期存在的ui重新绑定viewport.
	-- 需要进一步梳理流程
	self.portrait:add_to_viewport()
	self.armor:add_to_viewport()

	self.portrait:update()
	self.armor:update()
	-- self.portrait:AddToViewport()
	-- self.armor:AddToViewport()
end

-- gui_mgr end

-- set global
_set_global('_gui', gui_mgr())
