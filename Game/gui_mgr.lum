

-- gui_mgr begin

class('gui_mgr')

function gui_mgr._init(self)
	-- basic class type
	self.panel = panel
	self._guis = {}  -- {name:gui}
end

function gui_mgr.__index(self, name)
	local attr = getmetatable(self)[name]
	if attr ~= nil then
		return attr
	end

	assert(self._guis[name] == nil)

	local module_name = 'Guis.' .. name
	local module = clean_import(module_name)

	local gui_type = module[name]
	local gui = gui_type()

	self._guis[name] = gui
	rawset(self, name, gui)
	return gui
end

function gui_mgr.on_game_exit(self)
	for name, gui in pairs(self._guis) do
		gui:release()
		rawset(self, name, nil)
	end
	self._guis = {}
end

function gui_mgr.on_change_world(self)
	-- 这里需要对长期存在的ui重新绑定viewport.
	-- 需要进一步梳理流程
	self.portrait:add_to_viewport()
	self.armor:add_to_viewport()

	self.portrait:update()
	-- self.portrait:AddToViewport()
	-- self.armor:AddToViewport()
end

-- gui_mgr end

-- class panel begin
class('panel')

panel._obj = object.dummy()

function panel._init(self, res)
	self._visible = true

	self:_load_res(res)
end

function panel.show(self)
	if self._visible then
		return
	end
	self._visible = true
end

function panel.hide(self)
	if not self._visible then
		return
	end

	self._visible = false
end

function panel._load_res(self, res)
	if res == nil then
		return
	end
	-- unsafe code, 小心内存泄漏
	local parent = _engine._game_instance
	local object = object.create_object(parent, res)
--	object:add_to_root()
--	object:AddToViewport()
	self._obj = object
end

function panel.release(self)
	self._obj:remove_from_parent()
end

function panel.add_to_viewport(self)
	return self._obj:AddToViewport()
end

function panel.__index(self, name)
	local attr = getmetatable(self)[name]
	if attr ~= nil then
		return attr
	end

	return self._obj[name]
end
-- class panel end

-- set global
_set_global('_gui', gui_mgr())
