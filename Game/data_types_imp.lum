
-- class data_types begin
class('data_types')

function data_types._init(self)
	self.data_type = data_type
end

function data_types.__index(self, name)
	local data_type = rawget(data_types, name)
	if data_type ~= nil then
		return data_type
	end

	local module = clean_import('DataTypes.' .. name)
	data_type = module[name]
	rawset(self, name, data_type)
	return data_type
end
-- class data_types end
-- class data_type begin
class('data_type')

function data_type._set_owner(self, owner, desc)
	self._owner = owner
	self._desc = desc
	self._name = desc.name or ''
	self._notifiers = {}  -- {name notifier}
end

function data_type.notify_owner(self, event, ...)
	local owner = self._owner
	if not owner then -- standalone value
		return
	end
	
	local notifier = self._notifiers[event]
	if notifier == nil then
		notifier = 'on_' .. self._name .. '_' .. event
		self._notifiers[event] = notifier
	end

	if owner[notifier] then
		owner[notifier](owner, self._desc, ...)
	end
	if owner['on_attr_changed'] then
		owner.on_attr_changed(owner, self._desc, ...)
	end
end

function data_type.__index(self, key)
	local attr = getmetatable(self)[key]
	
	if type(attr) == 'table' and attr._get ~= nil then
		return attr._get(attr, self)
	end

	return attr
end

function data_type.__newindex(self, key, value)
	local attr = getmetatable(self)[key]
	
	if type(attr) == 'table' and attr._set ~= nil then
		return attr._set(attr, self, value)
	end
	rawset(self, key, value)
end

function data_type.on_attr_changed(self, owner, desc)
	self:notify_owner('')
end

-- set global
_set_global('data_types', data_types())
