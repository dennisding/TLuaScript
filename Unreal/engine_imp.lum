

import('object')
import('fun_utils')

-- class engine begin
class('engine')

function engine._init(self)
	local engine = _cpp_get_engine()
	self.engine = engine
end

function engine.set_root(self, root)
	self.root = root
end

function engine.callback(self, delta, fun, ...)
--	self.root:AddCallbck(delta, fun_utils.wrape_fun(fun, ...))
	local root = rawget(self.root, '_co')
	_cpp_engine_callback(root, delta, fun_utils.wrape_fun(fun, ...))
end

function engine.test(self)
	local counter = 0
	local function _fun()
		if counter < 100 then
			self:callback(1, _fun)
		end
		print(_text('engien.test fun'), towstring(counter))
		counter = counter + 1
	end
	self:callback(5, _fun)
end

function engine.__index(self, name)
	local attr = rawget(engine, name)
	if attr ~= nil then
		return attr
	end

	return rawget(self, 'engine')[name]
end

-- class engine end
-- set global
_set_global('_engine', engine())
