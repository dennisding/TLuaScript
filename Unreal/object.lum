
-- class vtable
class('vtable')

function vtable._init(self, _ct)
	rawset(self, '_ct', _ct)
end

local function _gen_property(property, cpp_getter, cpp_setter)
	local function _getter(self)
		return cpp_getter(rawget(self, '_co'), property)
	end

	local function _setter(self, value)
		return cpp_setter(rawget(self, '_co'), property, value)
	end

	return {_getter, _setter}
end

local function _gen_function(fun_context)
	local function _fun(self, ...)
		return _cpp_object_call_fun(rawget(self, '_co'), fun_context, ...)
	end

	local function _index()
		return _fun
	end
	
	return {_index, _index}
end

function vtable.__index(self, name)
	-- get the attribute from c++
	local ctype = rawget(self, '_ct')
	local property, getter, setter = _cpp_object_get_info(ctype, name)
	print(_text('cpp_object_get_info'), _text(name), _text(tostring(property)))
	print(_text(tostring(getter)), _text(tostring(setter)))
	-- update the vtable
	local attr = nil
	if property ~= nil then
		attr = _gen_property(property, getter, setter)
	elseif getter ~= nil then
		attr = _gen_function(getter)
	else
		local function _nil_fun(...)
			return nil
		end
		attr = {_nil_fun, _nil_fun}
	end

	rawset(self, name, attr)
	return attr
end
-- class vtable end

function vtable.__newindex(self, name, value)
	assert(false, "can not set the vtable directly")
end

---  class object begin
class('object')

function object.__index(self, name)
	return rawget(self, '_vtable')[name][1](self)
end

function object.__newindex(self, name, value)
	rawget(self, '_vtable')[name][2](self, value)
end
--- class object end

local function _gen_vtable(ctype, context)
	local result = vtable(ctype, context)
	_sys.vtables[ctype] = result
	return result
end

function reset_metatable(self, context)
	local ctype = rawget(self, '_ct')

	local lua_type = _sys.ctypes[ctype]
	local vtable = _sys.vtables[ctype] or _gen_vtable(ctype, context)

	if lua_type == nil then
		lua_type = context.gen_lua_type(ctype) or object
		_sys.ctypes[ctype] = lua_type
	end

	assert(vtable ~= nil, "invalid vtable")
	rawset(self, '_vtable', vtable)
	setmetatable(self, lua_type)
end

local function _get_vtable(ctype)
	local result = _sys.vtables[ctype]
	if result ~= nil  then
		return result
	end

	result = vtable(ctype)
	_sys.vtables[ctype] = result
	return result
end

function set_vtable(self)
	local ctype = rawget(self, '_ct')
	local vtable = _get_vtable(ctype)

	assert(vtable ~= nil, "invalid vtable")
	rawset(self, '_vtable', vtable)
end
