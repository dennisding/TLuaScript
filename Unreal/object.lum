
-- class vtable
class('vtable')

function vtable._init(self, _ct)
	rawset(self, '_ct', _ct)
end

local function _gen_property(property, cpp_getter, cpp_setter)
	local function _getter(self)
		return cpp_getter(rawget(self, '_co'), property)
	end

	local function _setter(self, value)
		return cpp_setter(rawget(self, '_co'), property, value)
	end

	return {_getter, _setter}
end

local function _gen_function(fun_context)
	local function _fun(self, ...)
		return _cpp_object_call_fun(rawget(self, '_co'), fun_context, ...)
	end

	local function _index()
		return _fun
	end
	
	return {_index, _index}
end

local function _gen_nil_function(key)
	local function _nil_fun(self, ...)
		return nil
	end

	local function _raw_set(self, value)
		rawset(self, key, value)
	end

	return {_nil_fun, _raw_set}
end

function vtable.__index(self, name)
	-- get the attribute from c++
	local ctype = rawget(self, '_ct')
	local property, getter, setter = _cpp_object_get_info(ctype, name)
	print(_text('cpp_object_get_info'), _text(name), _text(tostring(property)))
	print(_text(tostring(getter)), _text(tostring(setter)))
	-- update the vtable
	local attr = nil
	if property ~= nil then
		attr = _gen_property(property, getter, setter)
	elseif getter ~= nil then
		attr = _gen_function(getter)
	else
		attr = _gen_nil_function(name)
	end

	rawset(self, name, attr)
	return attr
end
-- class vtable end

function vtable.__newindex(self, name, value)
	assert(false, "can not set the vtable directly")
end

---  class object begin
class('object')

function object.__index(self, name)
	local attr = getmetatable(self)[name]
	if attr then
		if type(attr) == 'table' and attr._get ~= nil then
			return attr._get(attr, self)
		end
		return attr
	end

	return rawget(self, '_vtable')[name][1](self)
end

function object.__newindex(self, name, value)
	local attr = getmetatable(self)[name]
	if attr and attr._set ~= nil then
		attr._set(attr, self, value)
		return
	end

	rawget(self, '_vtable')[name][2](self, value)
end

-- 危险行为, 注意释放问题
-- function object.add_to_root(self)
-- 	local cobject = rawget(self, '_co')
-- 	_cpp_object_add_to_root(cobject)
-- end

function object.remove_from_parent(self)
	local cobject = rawget(self, '_co')
	_cpp_object_remove_from_parent(cobject)
end

-- for debug use
function object._get_attrs(self)
	local ctype = rawget(self, '_ct')
	local attrs = _cpp_object_get_attrs(ctype)
	local result = {}
	for index, value in pairs(attrs) do
		result[index] = _cpp_utf16_to_utf8(value)
	end
	return result
end

-- for debug use
function object._dump_attrs(self)
	print(towstring(self))
	for index, value in ipairs(self:_get_attrs()) do
		print(_text('    '), _text(value), towstring(self[value]))
		if type(self[value]) == 'table' then
			tablex.print_table(self[value])
		end
	end
end

--- class object end
-- class dummy begin
class('dummy', nil, 'singleton')

function dummy.__index(self, name)
	return self
end

function dummy.__newindex(self, name, value)
end

function dummy.__call(self, ...)
	return self
end

-- class dummy end

local function _gen_vtable(ctype, context)
	local result = vtable(ctype, context)
	_sys.vtables[ctype] = result
	return result
end

local function _get_vtable(ctype)
	local result = _sys.vtables[ctype]
	if result ~= nil  then
		return result
	end

	result = vtable(ctype)
	_sys.vtables[ctype] = result
	return result
end

function set_vtable(self)
	local ctype = rawget(self, '_ct')
	local vtable = _get_vtable(ctype)

	assert(vtable ~= nil, "invalid vtable")
	rawset(self, '_vtable', vtable)
end

local function _get_lua_type(cobject, ctype)
	local name = _cpp_object_get_name(ctype)
	local new_type = class(name, object, 'clean')
	return new_type
end

function new_object(cobject, ctype)
	assert(cobject ~= nil)

	if ctype == nil then
		ctype = _cpp_object_get_type(cobject)
	end

	local lua_type = _get_lua_type(cobject, ctype)
	local instance = lua_type._new_instance()
	rawset(instance, '_co', cobject)
	rawset(instance, '_ct', ctype)

	set_vtable(instance)
	instance:_call_init()

	return instance
end

function create_object(parent, class_name)
	local ctype = _cpp_load_class(class_name)
	assert(ctype ~= nil)
	local cparent = parent
	if type(parent) == 'table' then
		cparent = rawget(parent, '_co')
	end
	local cobject = _cpp_new_object(cparent, ctype)
	assert(cobject ~= nil)

	return new_object(cobject, ctype)
end