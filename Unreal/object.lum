
-- class vtable
class('vtable')

function vtable._init(self, _ct, context)
--	self._ct = _ct
	rawset(self, '_ct', _ct)
	rawset(self, '_context', context)
end

local function _gen_property(property, cpp_getter, cpp_setter)
	local function _getter(self)
		return cpp_getter(rawget(self, '_co'), property)
	end

	local function _setter(self, value)
		return cpp_setter(rawget(self, '_co'), property, value)
	end

	return {_getter, _setter}
end

local function _gen_function(property, getter)

end

function vtable.__index(self, name)
	-- get the attribute from c++
	local ctype = rawget(self, '_ct')
	local context = rawget(self, '_context')
	local property, getter, setter = context.get_info(ctype, name)
	print(_text('cpp_object_get_info'), _text(name), _text(tostring(property)))
	print(_text(tostring(getter)), _text(tostring(setter)))
	-- update the vtable
	local attr = nil
	if property ~= nil then
		attr = _gen_property(property, getter, setter)
	elseif getter ~= nil then
		attr = _gen_function(property, getter)
	else
		local function _nil_fun(...)
			return nil
		end
		attr = {_nil_fun, _nil_fun}
	end

	rawset(self, name, attr)
	return attr
end
-- class vtable end

function vtable.__newindex(self, name, value)
	assert(false, "can not set the vtable directly")
end

---  class object begin
class('object')

function object.__index(self, name)
	return rawget(self, '_vtable')[name][1](self)
end

function object.__newindex(self, name, value)
	rawget(self, '_vtable')[name][2](self, value)
end

local function _gen_object_type(ctype)
	return object
end

--- class object end
local function _gen_vtable(ctype, context)
	local result = vtable(ctype, context)
	_sys.vtables[ctype] = result
	return result
end

function reset_metatable(self, context)
	local ctype = rawget(self, '_ct')

	local lua_type = _sys.ctypes[ctype]
	local vtable = _sys.vtables[ctype] or _gen_vtable(ctype, context)

	if lua_type == nil then
		lua_type = context.gen_lua_type(ctype) or object
		_sys.ctypes[ctype] = lua_type
	end

	assert(vtable ~= nil, "invalid vtable")
	rawset(self, '_vtable', vtable)
	setmetatable(self, lua_type)
	if self._init then
		self:_init()
	end
end

local context = {}
context.gen_lua_type = _gen_object_type
context.get_info = _cpp_object_get_info

-- class proxy begin
class('proxy')
_set_global('_lo', proxy)       -- _log = lua_object

function proxy.__init(self, name)
	_reset_metatable(self, context)
	return self[name]
end

function proxy.__newindex(self, name, value)
	_reset_metatable(self, context)
	self[name] = value
end
-- class proxy end
