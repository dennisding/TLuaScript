
import('object')
import('struct_map')

-- class struct begin
class('struct', object.object)
-- class struct end

-- class struct_mgr begin
class('struct_mgr')

function struct_mgr._init(self)
	self.ctypes = {}	-- {ctype : lua_type}
end

function struct_mgr.__index(self, name)
	local attr = rawget(getmetatable(self), name)
	if attr ~= nil then
		return attr
	end
	-- return new types, register
	-- to do : add the special type
	assert(nil)
end

function struct_mgr._get_lua_type(self, ctype)
	assert(ctype ~= nil)

	local lua_type = self.ctypes[ctype]
	if lua_type ~= nil then
		return lua_type
	end

	local ctype_name = _cpp_struct_get_name(ctype)
	

	local module_name = struct_map[ctype_name] or ('Structs.' .. ctype_name)
	local names = stringx.split(module_name, '.')
	local type_name = names[#names]

	local module = safe_import(module_name)

	lua_type = module[type_name] or class(type_name, struct, 'clean')
	self.ctypes[ctype] = lua_type

	return lua_type
end

function struct_mgr._wrape_struct(self, cobject, ctype)
	assert(cobject ~= nil)

	local lua_type = self:_get_lua_type(ctype)
	local instance = lua_type:_new_instance()
	rawset(instance, '_co', cobject)
	rawset(instance, '_ct', ctype)
	object.set_vtable(instance, true)

	return instance
end

function struct_mgr.vector(x, y, z)
	local cobject, ctype = _cpp_make_vector(x, y, z)
	return Struct:_wrape_struct(cobject, ctype)
end

-- class struct_mgr end

-- _ls means lua struct for c++
_set_global('_ls', cstruct_proxy)
_set_global('Struct', struct_mgr())