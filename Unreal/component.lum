
import('object')
import('component_map')

-- class component begin
class('component', object.object)

component._plugins = {
	'Components.Plugins.basic'
}
-- class component end

local function _get_component_type(ctype)
	local lua_type = _sys.ctypes[ctype]
	if lua_type ~= nil then
		return lua_type
	end

	local ctype_name = _cpp_object_get_name(ctype)
	local type_name = component_map[ctype_name] or ('Components.' .. ctype_name)
	local module = safe_import(type_name)

	local component_type = module[ctype_name]
	if component_type == nil then
		component_type = class(ctype_name, component, 'clean')
	end
	_sys.ctypes[ctype] = component_type
	return component_type
end

function new_component(cobject, ctype)
	local component_type = _get_component_type(ctype)

	local instance = component_type:_new_instance()
	rawset(instance, '_co', cobject)
	rawset(instance, '_ct', ctype)
	object.set_vtable(instance)

	return instance
end
