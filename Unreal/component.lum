
import('ctype')
import('component_map')

local type_prefix = 'Components.'

-- class struct
class('ccomponent')

function cstruct.__index(self, name)
	local attr = rawget(self, '_vtable')[name]
	return attr[1](self)
end

function cstruct.__newindex(self, name, value)
	local attr = rawget(self, '_vtable')[name]

	return attr[2](self, value)
end

-- class vtable
class('vtable')

function vtable._init(self, _ct)
	rawset(self, '_ct', _ct)
end

function vtable.__index(self, name)
	local ctype = rawget(self, '_ct')
	local attr = _cpp_struct_get_attr(ctype, name)

	rawset(self, name, attr)
	return attr
end

function vtable.get_name()
	local ctype = rawget(self, '_ct')
	return _cpp_struct_get_name(ctype)
end

local function _reset_metatable(instance)
	local ctype = rawget(self, '_ct')
	local vtable = _sys.vtables[ctype] or vtable(ctype)

	local ctype_name = ctype.get_name()
	local type_name = struct_map[ctype_name] or ('Structs.' .. ctype_name )
	local module = safe_import(type_name)
	local _class = module[ctype_name] or cstruct

	-- reset the instance
	rawset(instance, '_vtable', vtable)
	setmetatable(instance, _class)

	if _class._init then
		self:_init()
	end
end

class('cstruct_proxy')
_set_global('_cstruct', cstruct_proxy)

function cstruct_proxy.__index(self, name)
	_reset_metatable(self, type_prefix)
	return self[name]
end

function cstruct_proxy.__newindex(self, name, value)
	_reset_metatable(self, type_prefix)
	self[name] = value
end
