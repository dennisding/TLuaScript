
import('fun_utils')

function _init(self)
	_world.p = self
end

function test(self)
	print(towstring(_engine.root.OneMultiDelegate:execute(1234)))

	local function _fun()
		print(_text('on_callback'))
	end

	function _fire()
		print(_text('bind function In lua _fire'))
	end

	local delegate = _engine.root.Delegate
	-- delegate:bind(self, 'fire')
	-- delegate:execute()

	delegate:bind(_fire)
	delegate:execute()

	-- delegate = _engine.root.OneDelegate
	-- delegate:bind(self, 'fire_one')

--	_gui.armor:say_hello()
end

function fire(self)
	print(towstring(self), _text('on fire'))
end

function fire_one(self, value)
	print(towstring(self), _text('on fire'), towstring(value))
end

function delegate_callback(self)
	print(_text('delegate_callback'))
end

function use_skill(self, skill_id)
	local data = _datas.skill[skill_id]

	printf("use_skill: %d, name=%s", skill_id, data.name)
end

function use_item(self, item_id)
	local item = data_types.item.new(item_id)
	
	item:use_on(self)
end

function test_method(self, value, msg)
	print(_text('test_method'), towstring(value), msg)
	local mesh = self:SayHello(1314, _text('中文消息'))

	self.Mesh1P = mesh
--	print(towstring(mesh))
	-- assert(mesh == self.Mesh1P)
	-- mesh.bCastDynamicShadow = false
	-- mesh.CastShadow = false
end

function jump(self, input_value)
	print(_text('actor jump!!!!'))
end

function pass_struct(self, channel)
end

function pass_component(self)
	print(_text('component Mesh from c++'), _text(tostring(com)))
end