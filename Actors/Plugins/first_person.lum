
function _init(self)
	print(_text('capsuleComponent'), self.CapsuleComponent)
	self.CapsuleComponent:InitCapsuleSize(55, 96)

	self:setup_camera()
	self:setup_mesh()
end

function setup_mesh(self)
	local mesh = self:create_default_subobject(_text('CharacterMesh1P'), 
								Class.SkeletalMeshComponent)
	
	self.Mesh1P = mesh

	mesh:SetOnlyOwnerSee(true)
	mesh:AttachToComponent(self.FirstPersonCameraComponent)
	mesh.bCastDynamicShadow = true
	mesh.CastShadow = true
--	mesh:SetRelativeLocation(Vector(-30, 0, -150))
	mesh:SetRelativeLocation(Struct.vector(-30, 0, -150))
end

function setup_camera(self)
 	local camera = self:create_default_subobject(_text('FirstPersonCamera'), Class.CameraComponent)

 	camera:AttachToComponent(self.CapsuleComponent)
 --	camera:SetRelativeLocation(Vector(-10, 0, 60))
 	camera:SetRelativeLocation(Struct.vector(-10, 0, 60))
 	camera.bUsePawnControlRotation = true

	self.FirstPersonCameraComponent = camera
end

function controller_changed(self)
	print(_text('first_player controller_changed'))
	local controller = self.Controller
	if not controller then
		return
	end

	local is_local_player = controller.bIsLocalPlayerController
	local player = controller.Player
	local subsystem_type = Subsystem.EnhancedInputLocalPlayerSubsystem

	local subsystem = Function.Subsystem:GetLocalPlayerSubSystem(player, subsystem_type)
	subsystem:AddMappingContext(self.DefaultMappingContext, 0)
end

function move(self, movement)
	if self.Controller == nil then
		return
	end

	local forward = self:GetActorForwardVector()
	local right = self:GetActorRightVector()
	self:AddMovementInput(forward, movement.Y)
	self:AddMovementInput(right, movement.X)
end

function look(self, axis)
	if self.Controller == nil then
		return
	end

	self:AddControllerYawInput(axis.X)
	self:AddControllerPitchInput(axis.Y)
end
