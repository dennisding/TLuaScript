
local function _gather_infos(methods, attrs, module)
	local key = nil

	local function _gather(key)
		if stringx.start_with(key, '__') then
			return
		end

		local value = rawget(module, key)
		if type(value) == 'function' then
			container = methods[key] or {}
			if tablex.find(container, value) == nil then
				table.insert(container, value)
			end
			methods[key] = container
		elseif type(value) == 'table' then
			if value._get ~= nil or value._set ~= nil then
				attrs[key] = value
			end
		end
	end

	repeat
		key = next(module, key)
		if not key then
			break
		end

		_gather(key)
	until not key
end

local function _gather_module_info(methods, attrs, name, plugins)
	local plugin = clean_import(name)
	-- add the include
	local include = plugin._includes
	if type(include) == 'table' then
		table.move(include, 1, #include, #plugins + 1, plugins)
	end

	_gather_infos(methods, attrs, plugin)
end

local function _build_plugin_method(method_map, overloads, reverses)
	local result = {} -- {name:fun}
	overloads = tablex.to_set(overloads)
	reverses = tablex.to_set(reverses)

	local function _gen_list_method(name, methods)
		if reverses[name] ~= nil then
			tablex.reverse(methods)
		end

		local function _fun(...)
			for _, method in pairs(methods) do
				method(...)
			end
		end

		return _fun
	end

	for name, methods in pairs(method_map) do
		if #methods == 1 then
			result[name] = methods[1]
		elseif overloads[name] == nil then
			error(string.format("invalid overload method:[%s]", name))
		else
			result[name] = _gen_list_method(name, methods)
		end
	end

	return result
end

local function _gen_plugin_info(type)
	local methods = {} -- {name:{method1, method2, method3}}
	local attrs = {} -- {name: attrs}

	local plugins = rawget(type, '_plugins')
	local overloads = rawget(type, '_plugin_overloads') or {'_init'}
	local reverses = rawget(type, '_plugin_reverses') or {}
	if plugins == nil then
		return methods, attrs
	end

	-- _gather the class itself
	_gather_infos(methods, attrs, type)

	local loaded = {}
	plugins = tablex.copy(plugins) -- we will modify the plugins
	while #plugins > 0 do
		local name = table.remove(plugins)
		if loaded[name] == nil then
			loaded[name] = true
			_gather_module_info(methods, attrs, name, plugins)
		end
	end

	local method_infos = _build_plugin_method(methods, overloads, reverses)
	return method_infos, attrs
end

local function _setup_data_desc(_new_class)
	local data_desc = {}
	for key, value in pairs(_new_class) do
		-- data_descriptor
		if type(value) == 'table' and (value._get ~= nil or value._set ~= nil ) then
			value:set_name(key)
			data_desc[key] = value
		end
	end
	_new_class._data_desc = data_desc
end

local function _build_hints(...)
	-- clean
	return tablex.to_set({...})
end

function class(name, parent, ...)
	local _new_class = {}
	if parent ~= nil then
		parent._make_class_ready()
		_new_class = tablex.copy(parent)
		_new_class._plugins = nil
		_new_class._plugin_overloads = nil
		_new_class._plugin_reverses = nil
	end
	_new_class._type = name
	_hints = _build_hints(...)
	if not _hints.clean then
		_set_upvalue_by_name(name, _new_class)
	end

	local function _install_plugins()
		local methods, attrs = _gen_plugin_info(_new_class)
		-- set the method
		for name, fun in pairs(methods) do
			_new_class[name] = fun
		end
		-- set the attribute
		for name, attr in pairs(attrs) do
			_new_class[name] = attr
		end
	end

	local _ready = false
	local function _make_class_ready()
		if _ready then
			return
		end
		_install_plugins()
		_setup_data_desc(_new_class)
		_ready = true
	end

	local function _new_instance(type, value)
		_make_class_ready()

		local instance = {}
		setmetatable(instance, type)
		if type._data_desc ~= nil then
			rawset(instance, '_attrs', {})
		end
		if value ~= nil then
			instance:_from_value(value)
		end
		return instance
	end

	local function _call_init(instance, ...)
		local init = _new_class._init
		if init ~= nil then
			init(instance, ...)
		end
		return instance
	end

	local function _new(type, ...)
		local instance = _new_instance(type)
		_call_init(instance, ...)
		return instance
	end

	local function _init_new(type, value, ...)
		local instance = _new_instance(type, value)
		_call_init(instance, ...)
		return instance
	end

	local function _from_value(self, value)
		-- 暂时只处理 data_desc
		if not _new_class._data_desc then
			return
		end
		for name, desc in pairs(_new_class._data_desc) do
			self._attrs[name] = desc:from_value(self, value[name])
		end
	end

	-- class setup
	_new_class._new_instance = _new_instance
	_new_class._call_init = _call_init
	_new_class._init_new = _init_new
	_new_class._from_value = _from_value
	-- 调用链上只有一个__index函数起效果
	if parent and type(parent.__index) == 'function' then
		_new_class.__index = parent.__index
	else
		_new_class.__index = _new_class
	end

	_new_class._make_class_ready = _make_class_ready
	_new_class._raw_set = _raw_set
	_new_class.__name = string.format('object<%s>', name)

	-- class attrs
	_new_class._super = parent

	local function _singleton_new(type, ...)
		local singleton = rawget(type, '_singleton')
		if singleton == nil then
			singleton = _new(type, ...)
			rawset(type, '_singleton', singleton)
		end
		return singleton
	end

	-- class metatable setup
	local metatable = {}
	if _hints.singleton then
		metatable.__call = _singleton_new
	else 
		metatable.__call = _new
	end
	metatable.__index = parent
	metatable.__name = string.format('class<%s>', name)
	setmetatable(_new_class, metatable)
	return _new_class
end

local function is_child_of(_class, base)
	local parent = rawget(_class, '_parent')
	if parent == nil then
		return false
	end
	
	repeat
		if parent == base then
			return true
		end
		parent = rawget(parent, '_parent')
	until not parent

	return false
end

local function is_same_type(object_1, object_2)
	return getmetable(object_1) == getmetable(object_2)
end

-- set global
_set_global('class', class)
_set_global('is_child_of', is_child_of)
_set_global('is_same_type', is_same_type)
