-- 0. reload不是银弹, 不能解决所有问题, reload解决不了的, 请重启
-- 1. basic.lua 和 sys.lua 不进行reload
-- 3. 已经构建好的table, 只更新table里面的内容, 不更新table本身

local function print_info(names, filter, info)
	filter = filter or ''
	if tablex.find(names, filter) == nil then
		return
	end
	local msg = table.concat(names, '.')
	print(_text('print_info'), _text(msg), _text(tostring(info)))
end

local _update_table = nil

local function _update_attr(names, old, new)
	-- new value is nil, don't delete the attribute
	if new == nil then
		return old
	end

	if old == new then
		return new
	end
	-- type changed
	if type(old) ~= type(new) then
		return new
	end
	
	-- not a table, update directly
	if type(old) ~= 'table' then
		return new
	end

	return _update_table(names, old, new)
end

function _update_table(names, old, new)
	-- object value no changed, return the old one
	if old == new then
		return old
	end
	-- old value is reloading
	if _sys.reloading[old] then
		return old
	end

	_sys.reloading[old] = true

	-- make class ready
	if type(new) == 'table' and type(new._make_class_ready) == 'function' then
		new._make_class_ready()
	end

	-- 删除新表中不存在的数据, 最顶层的数据不删除(_G 和 module)
	local key = nil
	local old_copy = tablex.raw_copy(old)
	-- repeat
	-- 	key = next(old_copy, key)
	-- 	if not key then
	-- 		break
	-- 	end
	-- 	-- the del action
	-- 	local new_value = rawget(new, key)
	-- 	if new_value == nil then
	-- 		rawset(old, key, nil)	-- del the old attr
	-- 	end
	-- until not key

	-- 添加旧表中不存在的数据
	key = nil
	local new_copy = tablex.raw_copy(new)
	repeat
		key = next(new_copy, key)
		if not key then
			break
		end
		-- the add action
		if rawget(old, key) == nil then
			local new_value = rawget(new, key)
			rawset(old, key, new_value)
		end
	until not key
	
	-- 修改旧表和新表都存在的数据
	key = nil
	old_copy = tablex.raw_copy(old)		-- 有些key被删了, 这里要重新copy
	repeat
		key = next(old_copy, key)
		if not key then
			break
		end
		-- update the value
		local old_value = rawget(old, key)
		local new_value = rawget(new, key)
		table.insert(names, key)
		local update_value = _update_attr(names, old_value, new_value)
--		print_info(names, 'hello', update_value)
		rawset(old, key, update_value)
		table.remove(names)
	until not key

	_sys.reloading[old] = false
	return old
end

-- 让旧表和新表reload后保持对象id一致, 用的是旧对象的id
local function _restore_table(old, new)
	local key = nil
	repeat
		key = next(old, key)
		if not key then
			break
		end
		local old_value = rawget(old, key)
		rawset(new, key, old_value)
	until not key
end

local function _reload_require()
	-- 每次执行完requie后, 更新一下_G表就可以了.
	local loaded_copy = tablex.raw_copy(_sys.loaded)
	-- 这里需要clear是因为_sys.loaded里面只存了一个标志, 不是require模块本身
	-- import哪里不可以 clear, 因为要保持新函数和旧函数有相同的_ENV
	tablex.clear(_sys.loaded)
	for key, value in pairs(loaded_copy) do
		local origin_g = tablex.raw_copy(_G)
		-- do the reload
		print(_text('reload requied'), _text(key))
		trace_call(require, key)
		_update_table( {'require', key, '_G'}, origin_g, _G)
		_restore_table(origin_g, _G)
	end
end

local function _reload_import()
	local modules = tablex.raw_copy(_sys.modules)
	-- 需要更新_G表和module本身, 
	-- module的更新在import函数里面进行, 这里只更新_G表
	for name, module in pairs(modules) do
		local origin_g = tablex.raw_copy(_G)
		-- do the reload
		trace_call(safe_import, name)
		_update_table({'import', name, '_G'}, origin_g, _G)
		_restore_table(origin_g, _G)
	end
end

local function _do_reload()
	_reload_require()
	_reload_import()
end

local function _update_module(names, old, new)
	_update_table(names, old, new)
	_restore_table(old, new)
end

-- 需要处理
-- 1. 处理require引入的模块
-- 2. 处理_import引入的模块
function reload()
	_sys.reloading = {}
	_sys.update_module = _update_module

	print(_text('reload lua code'))
	_do_reload()

	_sys.reloading = false
end